generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum UserStatus {
  INIT                      // Just created with role
  PENDING_EMAIL_VERIFICATION // Basic info added, waiting for email verification
  EMAIL_VERIFIED            // Email verified, profile incomplete
  PENDING_ADMIN_APPROVAL    // Admin approval pending
  ACTIVE                    // Profile completed, can login
  INACTIVE                  // Admin deactivated
  SUSPENDED                 // Admin suspended
}

enum TokenType {
  ACCESS
  REFRESH
}


enum NotificationType {
  SYSTEM
  APPROVAL
  REMINDER
}

enum ConnectionType {
  SCANNED    // من العيادة (instant)
  REQUESTED  // Patient request
}

enum ConnectionStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum DocumentType {
  LAB_RESULT
  XRAY
  PRESCRIPTION
  MEDICAL_REPORT
  OTHER
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  role            UserRole   @default(PATIENT)

  // Status & Approval
  status          UserStatus 
  isActive        Boolean    @default(false)
  approvedAt      DateTime?
  approvedBy      String?
  rejectionReason String?
  isProfileComplete Boolean @default(false)
  registrationStep Int      @default(0) // 0=init, 1=basic, 2=verified, 3=complete

  // Identity Docs (Doctors only)
  nationalId      String?    @unique
  idCardImage     String?

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  patient             Patient?
  doctor              Doctor?
  otps                Otp[]
  tokens              AuthToken[]
  notifications       Notification[]


  @@map("users")
}

model Otp {
  id        String   @id @default(uuid())
  userId    String
  code      String
  type      String // 'EMAIL_VERIFICATION', 'LOGIN_VERIFICATION', 'PASSWORD_RESET'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model AuthToken {
  id         String    @id @default(uuid())
  userId     String
  token      String    @unique
  type       TokenType
  isRevoked  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_tokens")
}

model Notification {
  id         String           @id @default(uuid())
  userId     String
  message    String
  type       NotificationType @default(SYSTEM)
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Patient {
  id               String    @id @default(uuid())
  userId           String    @unique
  dateOfBirth      DateTime?
  gender           String?
  address          String?
  emergencyContact String?
  bloodType        String?
  allergies        String?

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalRecords MedicalRecord[]

  connections         DoctorPatientConnection[]
  followUpRequests    FollowUpRequest[]
  prescriptions       Prescription[]

  @@map("patients")
}

model Specialization {
  id          String  @id @default(uuid())
  name        String  @unique
  nameAr      String?
  description String?

  // Relations
  doctors Doctor[]

  @@map("specializations")
}

model Doctor {
  id               String   @id @default(uuid())
  userId           String   @unique
  specializationId String?
  licenseNumber    String?  @unique
  experience       Int?
  bio              String?
  consultationFee  Decimal?

  // Working hours
  workingDays  Json?
  workingHours Json?

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization Specialization? @relation(fields: [specializationId], references: [id])

  connections         DoctorPatientConnection[]
  followUpRequests    FollowUpRequest[]
  prescriptions       Prescription[]

  @@map("doctors")
}

model DoctorPatientConnection {
  id              String            @id @default(uuid())
  doctorId        String
  patientId       String
  connectionType  ConnectionType
  status          ConnectionStatus  @default(ACTIVE)
  
  // Communication schedule (set by doctor after accepting)
  availableDays   Json?             // ["wednesday", "friday"]
  availableHours  Json?             // {"start": "17:00", "end": "21:00"}
  
  connectedAt     DateTime          @default(now())
  lastActivityAt  DateTime?
  
  // Relations
  prescriptions   Prescription[]
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  patient         Patient           @relation(fields: [patientId], references: [id])
  
  @@unique([doctorId, patientId])
  @@map("doctor_patient_connections")
}

model FollowUpRequest  {
  id        String @id @default(uuid())
  patientId String
  doctorId  String
  prescriptionImage   String        // صورة الروشتة (required)
  notes               String?
  status              RequestStatus @default(PENDING)
  rejectionReason     String?


      // Timestamps
  requestDate         DateTime      @default(now())
  responseDate        DateTime?
  respondedBy         String?       // Doctor ID

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])

  @@map("follow_up_requests")
}

model MedicalRecord {
  id        String @id @default(uuid())
  patientId String
  doctorId      String
  

  recordType  String
  title       String
  description String?
  diagnosis   String?
  treatment   String?
  medications String?
  

  // File attachments
  attachments Json?

  recordDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medical_records")
}
model Prescription {
  id            String  @id @default(uuid())
  connectionId  String
  doctorId      String
  patientId     String
  medications   Json // Array of medications
  /*
  [
    {
      name: "Panadol",
      frequency: 3,
      frequencyType: "daily", // daily, weekly
      notes: "بعد الأكل",
      duration: "7 days"
    }
  ]
  */
  notes         String?
  isActive      Boolean @default(true)

  prescribedAt  DateTime
  updateAt      DateTime

  //relation

  connection    DoctorPatientConnection @relation(fields: [connectionId], references: [id])
  doctor        Doctor  @relation(fields: [doctorId], references: [id])
  patient       Patient @relation(fields: [patientId], references: [id])

  @@map("prescriptions")
}