import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, HttpCode, HttpStatus, Request } from '@nestjs/common';
import { QrService } from './qr.service';
import { ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';
import { ApiAuth } from 'src/common/decorators/api-auth.decorator';
import { GenerateQrDto, InvalidateQrResponseDto, ScanQrAndValidateDto, ValidateQrDto } from './dto/generate-qr.dto';
import { Roles } from 'src/auth/decorators/roles.decorator';
import { UserRole } from '@prisma/client';
import { QrTokenResponseDto } from './dto/qr-response.dto';
import { CurrentUser } from 'src/auth/decorators/current-user.decorator';
import { ActiveQrListResponseDto } from './dto/active-qr-list.dto';

@ApiTags('QR Code')
@Controller('qr')
@ApiAuth()
export class QrController {
  constructor(private readonly qrService: QrService) {}
    
  @Post('generate')
  @Roles(UserRole.DOCTOR)
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'Generate a connection QR code',
    description: 'Generate a QR code for a patient to connect with a doctor',
   })
   @ApiResponse({
    status: HttpStatus.CREATED,
    description: 'The QR code was successfully generated',
    type: QrTokenResponseDto,
   })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Only doctors can generate QR codes' })
  @ApiResponse({ status: 400, description: 'Doctor account is not active' })
 async generateQr(@CurrentUser() user: any, @Body() body: GenerateQrDto): Promise<QrTokenResponseDto> {
    return this.qrService.generateConnectionQrForDoctor (user,  body );
  }

  @Post('scan')
  @Roles(UserRole.PATIENT)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Scan a connection QR code',
    description: 'Scan a QR code to connect with a doctor',
   })
   @ApiResponse({
    status: HttpStatus.OK,
    description: 'The QR code was successfully scanned',
    type: QrTokenResponseDto,
   })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Only patients can scan QR codes' })
  @ApiResponse({ status: 400, description: 'Patient account is not active' })
 async scanQr(@CurrentUser() user: any, @Body() body: ScanQrAndValidateDto) {
    return this.qrService.scanAndConnectForPatient (user,  body );
  }

   @Post('validate')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Validate QR token without using it',
    description: 'Validate a QR token to check its expiry, usage, etc.',
  })
  @ApiResponse({
    status: 200,
    description: 'Token is valid',
    schema: {
      type: 'object',
      properties: {
        valid: { type: 'boolean', example: true },
        message: { type: 'string', example: 'QR Code is valid' },
        expiresAt: { type: 'string', format: 'date-time' },
        remainingMinutes: { type: 'number', example: 3 },
      },
    },
  })
  @ApiResponse({ status: 400, description: 'Invalid or expired token' })
  async validateQr(@Body() body: ValidateQrDto) {
    const token = await this.qrService.validateToken(body.token);
    const remainingMinutes = Math.floor(
      (token.expiresAt.getTime() - Date.now()) / 60000,
    );
    return {
      valid: true,
      message: 'QR Code is valid',
      expiresAt: token.expiresAt,
      remainingMinutes: Math.max(0, remainingMinutes),
    };
  }

   @Get('active')
  @Roles(UserRole.DOCTOR)
  @ApiOperation({
    summary: 'Get all active QR tokens',
    description: 'Get a list of all active QR tokens generated by the doctor',
  })
  @ApiResponse({
    status: 200,
    description: 'List of active QR tokens',
    type: ActiveQrListResponseDto,
  })
  async getActiveTokens(@Request() req): Promise<ActiveQrListResponseDto> {
    const doctorId = req.user.doctorId;
    return this.qrService.getActiveTokens(doctorId);
  }

  @Delete(':tokenId')
  @Roles(UserRole.DOCTOR)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Invalidate a QR token',
    description: 'إلغاء/حذف QR Code معين',
  })
  @ApiParam({
    name: 'tokenId',
    description: 'QR Token ID to invalidate',
    example: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',
  })
  @ApiResponse({
    status: 200,
    description: 'Token invalidated successfully',
    type: InvalidateQrResponseDto,
  })
  @ApiResponse({ status: 404, description: 'Token not found' })
  @ApiResponse({
    status: 403,
    description: 'You can only delete your own tokens',
  })
  async invalidateToken(
    @Request() req,
    @Param('tokenId') tokenId: string,
  ): Promise<InvalidateQrResponseDto> {
    const doctorId = req.user.doctorId;
    return this.qrService.invalidateToken(doctorId, tokenId);
  }
  
  @Post('cleanup')
  @Roles(UserRole.ADMIN)
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'Manually cleanup expired tokens',
    description: 'Manually run the cleanup job to delete expired QR tokens',
  })
  @ApiResponse({
    status: 200,
    description: 'Cleanup completed',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'string' },
        deletedCount: { type: 'number' },
      },
    },
  })
  async manualCleanup() {
    const count = await this.qrService.cleanupExpiredTokens();
    return {
      message: 'Cleanup completed successfully',
      deletedCount: count,
    };
  }


}
