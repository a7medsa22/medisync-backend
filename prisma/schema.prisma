// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  nationalId      String?    @unique
  idCardImage     String?
  role            UserRole   @default(PATIENT)
  status          UserStatus @default(PENDING)
  rejectionReason String?
  isActive        Boolean    @default(false)

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedAt DateTime?
  approvedBy String?

  // Relations
  patient             Patient?
  doctor              Doctor?
  otps                Otp[] // Add OTP relation
  createdAppointments Appointment[] @relation("CreatedByUser")

  @@map("users")
}

model Otp {
  id        String   @id @default(uuid())
  userId    String
  code      String
  type      String // 'EMAIL_VERIFICATION', 'LOGIN_VERIFICATION', 'PASSWORD_RESET'
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model Patient {
  id               String    @id @default(uuid())
  userId           String    @unique
  dateOfBirth      DateTime?
  gender           String?
  address          String?
  emergencyContact String?
  bloodType        String?
  allergies        String?

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  medicalRecords MedicalRecord[]

  @@map("patients")
}

model Specialization {
  id          String  @id @default(uuid())
  name        String  @unique
  nameAr      String?
  description String?

  // Relations
  doctors Doctor[]

  @@map("specializations")
}

model Doctor {
  id               String   @id @default(uuid())
  userId           String   @unique
  specializationId String
  licenseNumber    String?  @unique
  experience       Int?
  bio              String?
  consultationFee  Decimal?

  // Working hours
  workingDays  Json? // ["monday", "tuesday", ...]
  workingHours Json? // {"start": "09:00", "end": "17:00"}

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization Specialization @relation(fields: [specializationId], references: [id])
  appointments   Appointment[]

  @@map("doctors")
}

model Appointment {
  id        String @id @default(uuid())
  patientId String
  doctorId  String

  appointmentDate DateTime
  appointmentTime String // "14:30"
  duration        Int               @default(30) // minutes
  status          AppointmentStatus @default(SCHEDULED)

  notes              String?
  symptoms           String?
  cancellationReason String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])
  creator User    @relation("CreatedByUser", fields: [createdBy], references: [id])

  @@unique([doctorId, appointmentDate, appointmentTime])
  @@map("appointments")
}

model MedicalRecord {
  id        String @id @default(uuid())
  patientId String

  recordType  String // "consultation", "lab_result", "prescription", "radiology"
  title       String
  description String?
  diagnosis   String?
  treatment   String?
  medications String?

  // File attachments
  attachments Json? // [{"filename": "report.pdf", "url": "...", "type": "pdf"}]

  recordDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medical_records")
}
